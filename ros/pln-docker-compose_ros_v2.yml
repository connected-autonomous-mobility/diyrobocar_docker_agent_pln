version: '3'

services:

  # Simulation containers, not that all containers brought up will be using host network for easier ROS integration
  #sim:
  #  container_name: sim
  #  build:
  #    context: .
  #    dockerfile: sim.Dockerfile
  #  stdin_open: true
  #  network_mode: "host"
  #  environment:
  #    # env variables for the sim container
  #    # Scenario: 0 for single car timed trial (qualifying), 1 for dual car racing (grand prix)
  #    - RACE_SCENARIO=0
  #    # ids for agents: EGO_ID is for YOUR agents in both qualifying AND grand prix. You'll need to assign your team's agent id to this when you submit.
  #    - EGO_ID=pln
  #    # OPP_ID is ONLY for auto evaluation purposes, you DO NOT need to use the opp_id in your code
  #    - OPP_ID=opp
  #    # map parameters, RACE_MAP_PATH for the corresponding yaml path, RACE_MAP_IMG_EXT is the extension of the image file in ROS convention, i.e. assuming the image file and the yaml file are in the same directory and has the same filename except for the file extension
  #    - RACE_MAP_PATH=/f1tenth_gym/maps/vegas.yaml
  #    #- RACE_MAP_PATH=/f1tenth_gym/maps/vegas_800.yaml
  #    #- RACE_MAP_PATH=/f1tenth_gym/maps/vegas_obs.yaml
  #    - RACE_MAP_IMG_EXT=.png
  #    # Starting pose for both of the cars, also a map parameter
  #    - EGO_STARTING_X=0.0
  #    - EGO_STARTING_Y=0.0
  #    - EGO_STARTING_THETA=-0.5
  #    - OPP_STARTING_X=0.0
  #    - OPP_STARTING_Y=2.0
  #    - OPP_STARTING_THETA=-0.5
  #    # the executable path of the C++ backend of gym, should NOT be changed unless you know what you're doing
  #    - F1TENTH_EXEC_DIR=/f1tenth_gym/build/

  # Agent containers, in the same network with the sim. Agent 1 and 2 are identical here, replace the dockerfile for your own agents. For single vehicle timed trials, make sure that you're using only ONE agent that subscribes to the topics corresponded to EGO_ID. You can comment out the section for either agent1 or agent2 to make sure only one container runs.
  agent1:
    container_name: pln_ros2-cameracalibration
    build:
      context: .
      dockerfile: pln_ros2-galactic_v2.Dockerfile
    stdin_open: true
    tty: true        # docker run -t
    #network_mode: "host"
    ports:
      - "8887:8887"
    environment:
      - DISPLAY=${DISPLAY}
    # please do not delete the following lines, only comment
    devices:
      - /dev/video0:/dev/video0
      - /dev/video1:/dev/video1
    volumes:
      - /tmp/.X11-unix/:/tmp/.X11-unix/
      - /tmp/argus_socket:/tmp/argus_socket
    #- /home/rainer/catkin_ws/data:/catkin_ws/data
    #- /media/rainer/_data/30-projects/f1tenth/f1tenth_docker_agent_pln/pln5:/catkin_ws/src/pln5
    #image: parkinglotnerds/race7:version_0.1
    #
    # VVVV
    image: parkinglotnerds/racexx:version_0.1
    #entrypoint: ./start_test_client.sh
    entrypoint: bash
    #entrypoint: python /root/rC3car/test_client.py
    #entrypoint: /root/race7/pln_wait.sh
    #entrypoint: python3 /root/race7/manage.py drive --model=/root/race7/models/warren_pln5.h5 

  agent2:
    container_name: pln_ros1-cv-camera
    build:
      context: .
      dockerfile: pln_ros1-noetic_v2.Dockerfile
    stdin_open: true
    tty: true        # docker run -t
    #network_mode: "host"
    ports:
      - "8887:8887"
    # please do not delete the following lines, only comment
    volumes:
      - /dev/video0:/dev/video0
      - /tmp/.X11-unix/:/tmp/.X11-unix/
      - /tmp/argus_socket:/tmp/argus_socket
    #- /home/rainer/catkin_ws/data:/catkin_ws/data
    #- /media/rainer/_data/30-projects/f1tenth/f1tenth_docker_agent_pln/pln5:/catkin_ws/src/pln5
    #image: parkinglotnerds/race7:version_0.1
    #
    # VVVV
    image: parkinglotnerds/racexx-camera:version_0.1
    #entrypoint: ./start_test_client.sh
    entrypoint: bash
    #entrypoint: python /root/rC3car/test_client.py
    #entrypoint: /root/race7/pln_wait.sh
    #entrypoint: python3 /root/race7/manage.py drive --model=/root/race7/models/warren_pln5.h5 